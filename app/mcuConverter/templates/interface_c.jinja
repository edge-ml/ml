/*
The MIT License (MIT)

Copyright (c) 2021 KIT/TECO

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/


#ifndef EDGE_ML_PREDICTOR
#define EDGE_ML_PREDICTOR

#include "stdint.h"
#include <string.h>
#include <math.h>
#include <stdlib.h>

#define MIN(a, b) (((a) < (b)) ? (a) : (b))
#define MAX(a, b) (((a) > (b)) ? (a) : (b))

/*
---- Usable functions ----
int add_datapoint(const char *sensor, float value);
int predict();
int class_to_label(int class, string & label);
*/


int WINDOW_SIZE = {{ data.window_size }};
int NUM_SENSORS = {{ data.num_sensors}};
int NUM_FEATURES = {{data.num_features}};
int NUM_CLASSES = {{data.num_classes}};
{% for ts in data.timeSeries %}
float values_{{ts}}[{{ data.window_size }}];
int values_collected_{{ts}} = 0;
int c_idx_{{ts}} = 0;
{% endfor %}


    const char* class_to_label(int pred_class) {
    {% for i, ts in data.f.enumerate(data.labels) %}
        if (pred_class == {{i}}) {
            return "{{ts}}";
        }
    {% endfor %}
    return "Error";
    }

    int add_datapoint(const char *sensor, float value)
    {
        {% for ts in data.timeSeries %}
            if (strcmp(sensor, "{{ts}}") == 0) {
                values_{{ts}}[c_idx_{{ts}}] = value;
                c_idx_{{ts}} = (c_idx_{{ts}} + 1) % (WINDOW_SIZE);
                values_collected_{{ts}} = MAX(values_collected_{{ts}}, {{data.window_size}});
                return 0;
            }
        {% endfor %}
        return 1;
    }

    int predict()
    {
        computeFeatures();
        return run_classifier();
    }



    float features[{{data.num_features * data.num_sensors}}];

    float sum(float values[])
    {
        float sum = 0;
        for (int i = 0; i < WINDOW_SIZE; i++)
        {
            sum += values[i];
        }
        return sum;
    }

    float mean(float values[])
    {
        float sum = 0;
        for (int i = 0; i < WINDOW_SIZE; i++)
        {
            sum += values[i];
        }
        return sum / WINDOW_SIZE;
    }

    int compare(const void *a, const void *b)
    {
        return (*(int *)a - *(int *)b);
    }

    float median(float values[])
    {
        qsort(values, WINDOW_SIZE, sizeof(float), compare);
        return values[WINDOW_SIZE / 2];
    }

    float std_dev(float values[], float my_var)
    {
        return sqrt(my_var);
    }


    float var(float values[], float my_mean)
    {
        float q_dev = 0;
        for (int i = 0; i < WINDOW_SIZE; i++)
        {
            q_dev += (values[i] - my_mean) * (values[i] - my_mean);
        }
        return q_dev / WINDOW_SIZE;
    }

    float abs_energy(float values[])
    {
        float sum = 0;
        for (int i = 0; i < WINDOW_SIZE; i++)
        {
            sum += (values[i] * values[i]);
        }
        return sum;
    }

    float root_mean_square(float values[], float energy)
    {
        return sqrt(energy / WINDOW_SIZE);
    }

    float max(float values[])
    {
        float max = values[0];
        for (int i = 0; i < WINDOW_SIZE; i++)
        {
            if (values[i] > max)
            {
                max = values[i];
            }
        }
        return max;
    }

    float abs_max(float values[])
    {
        float max = abs(values[0]);
        for (int i = 0; i < WINDOW_SIZE; i++)
        {
            if (abs(values[i]) > max)
            {
                max = abs(values[i]);
            }
        }
        return max;
    }

    float min(float values[])
    {
        float min = values[0];
        for (int i = 0; i < WINDOW_SIZE; i++)
        {
            if (values[i] < min)
            {
                min = values[i];
            }
        }
        return min;
    }

    void computeFeatures()
    {

        {% for i, ts in data.f.enumerate(data.timeSeries) %}

        features[{{i}} * NUM_FEATURES] = (sum(values_{{ts}}) - {{data.scaler["center"][i * data.num_features]}}) / {{data.scaler["scale"][i * data.num_features]}};
        features[{{i}} * NUM_FEATURES + 1] = (median(values_{{ts}}) - {{data.scaler["center"][i * data.num_features + 1]}}) / {{data.scaler["scale"][i * data.num_features + 1]}};
        features[{{i}} * NUM_FEATURES + 2] = (mean(values_{{ts}}) - {{data.scaler["center"][i * data.num_features + 2]}}) / {{data.scaler["scale"][i * data.num_features + 2]}};;
        features[{{i}} * NUM_FEATURES + 3] = (((float) values_collected_{{ts}}) - {{data.scaler["center"][i * data.num_features + 3]}}) / {{data.scaler["scale"][i * data.num_features + 3]}};
        features[{{i}} * NUM_FEATURES + 4] = (std_dev(values_{{ts}}, var(values_{{ts}}, mean(values_{{ts}}))) - {{data.scaler["center"][i * data.num_features + 4]}}) / {{data.scaler["scale"][i * data.num_features + 4]}};
        features[{{i}} * NUM_FEATURES + 5] = (var(values_{{ts}}, mean(values_{{ts}})) - {{data.scaler["center"][i * data.num_features + 5]}}) / {{data.scaler["scale"][i * data.num_features + 5]}};
        features[{{i}} * NUM_FEATURES + 6] = (root_mean_square(values_{{ts}}, abs_energy(values_{{ts}})) - {{data.scaler["center"][i * data.num_features + 6]}}) / {{data.scaler["scale"][i * data.num_features + 6]}};
        features[{{i}} * NUM_FEATURES + 7] = (max(values_{{ts}}) - {{data.scaler["center"][i * data.num_features + 7]}}) / {{data.scaler["scale"][i * data.num_features + 7]}};
        features[{{i}} * NUM_FEATURES + 8] = (abs_max(values_{{ts}}) - {{data.scaler["center"][i * data.num_features + 8]}}) / {{data.scaler["scale"][i * data.num_features + 8]}};
        features[{{i}} * NUM_FEATURES + 9] = (min(values_{{ts}}) - {{data.scaler["center"][i * data.num_features + 9]}}) / {{data.scaler["scale"][i * data.num_features + 9]}};

        {% endfor %}
    }

    int run_classifier()
    {

       {% block predict %}{% endblock %}
    }

{% block protected %}{% endblock %}

#endif