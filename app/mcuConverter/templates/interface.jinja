/*
The MIT License (MIT)

Copyright (c) 2021 KIT/TECO

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/


#ifndef EDGE_ML_PREDICTOR
#define EDGE_ML_PREDICTOR
#include <cstdint>

#include "Edge-fel.h"

#include <vector>

using namespace std;
using namespace ex;

/*
---- Usable functions ----
bool add_datapoint(const char *sensor, float value);
int predict();
int class_to_label(int class, String & label);
*/

class EdgeMlClassifier
{

public:
    int class_to_label(int pred_class, String & label) {
    {% for i, ts in data.f.enumerate(data.labels) %}
        if (pred_class == {{i}}) {
            label = "{{ts}}";
            return 0;
        }
        return 1;
    {% endfor %}
    }


    int predict()
    {
        features = computeFeatures();
        return run_classifier();
    }

    bool add_datapoint(const char *sensor, float value)
    {
        {% for ts in data.timeSeries %}
            if (sensor == "{{ts}}") {
                values_{{ts}}[c_idx_{{ts}} * NUM_SENSORS] = value;
                c_idx_{{ts}} = (c_idx_{{ts}} + 1) % (WINDOW_SIZE * NUM_SENSORS);
                return true;
            }
        {% endfor %}
        return false;
    }

private:
    int WINDOW_SIZE = {{ data.window_size }};
    int NUM_SENSORS = {{ data.num_sensors}};
    int NUM_FEATURES = {{data.num_features}};
    int NUM_CLASSES = {{data.num_classes}};
    {% for ts in data.timeSeries %}
    vector<float> values_{{ts}} = vector<float>({{ data.window_size }}, 0);
    int c_idx_{{ts}} = 0;
    {% endfor %}

    vector<float> features = vector<float>({{data.num_features * data.num_sensors}});

    Extractor *ext = new Extractor();

    vector<float> computeFeatures()
    {

        {% for i, ts in data.f.enumerate(data.timeSeries) %}

        features[{{i}} * NUM_FEATURES] = ext->sum(values_{{ts}});
        features[{{i}} * NUM_FEATURES + 1] = ext->median(values_{{ts}});
        features[{{i}} * NUM_FEATURES + 2] = ext->mean(values_{{ts}});
        features[{{i}} * NUM_FEATURES + 3] = (float) values_{{ts}}.size();
        features[{{i}} * NUM_FEATURES + 4] = ext->std_dev(values_{{ts}}, ext->var(values_{{ts}}, ext->mean(values_{{ts}})));
        features[{{i}} * NUM_FEATURES + 5] = ext->var(values_{{ts}}, ext->mean(values_{{ts}}));
        features[{{i}} * NUM_FEATURES + 6] = ext->root_mean_square(values_{{ts}}, ext->abs_energy(values_{{ts}}));
        features[{{i}} * NUM_FEATURES + 7] = ext->max(values_{{ts}});
        features[{{i}} * NUM_FEATURES + 8] = ext->abs_max(values_{{ts}});
        features[{{i}} * NUM_FEATURES + 9] = ext->min(values_{{ts}});

        {% endfor %}
        return features;
    }

    int run_classifier()
    {

       {% block predict %}{% endblock %}
    }
};

{% block protected %}{% endblock %}

#endif